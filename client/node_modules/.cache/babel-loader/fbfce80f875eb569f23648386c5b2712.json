{"ast":null,"code":"import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport { Container } from 'todo-components';\nimport { ApolloClient } from 'apollo-client';\nimport { RestLink } from 'apollo-link-rest';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from \"react-apollo\";\nvar SERVER_URL = 'http://localhost:4000';\nvar restLink = new RestLink({\n  uri: SERVER_URL\n});\nvar client = new ApolloClient({\n  link: restLink,\n  cache: new InMemoryCache()\n}); // const App = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Container>\n//         <Header />\n//         <Main />\n//         <Footer />\n//       </Container>\n//     </ApolloProvider>\n//   )\n// }\n// class App extends Component {\n//   state = {\n//     todos: []\n//   }\n//   async componentDidMount() {\n//     const response = await axios.get(SERVER_URL+'todos')\n//     this.setState({todos: response.data})\n//   }\n//   createTodo = async ({ text }) => {\n//     const response = await axios.post(SERVER_URL+'todos', {text})\n//     this.setState(({ todos }) => ({\n//       todos: todos.concat([response.data])\n//     }));\n//   };\n//   toggleTodo = async ({ id }) => {\n//     const response = await axios.put(`${SERVER_URL}todos/${id}/toggle`)\n//     const updatedTodo = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.map(todo => {\n//         if (todo.id !== id) {\n//           return todo;\n//         }\n//         return updatedTodo;\n//       })\n//     }));\n//   };\n//   toggleAllTodos = async () => {\n//     await axios.put(SERVER_URL+'todos/toggle')\n//     const {data} = await axios.get(SERVER_URL+'todos')\n//     this.setState({todos: data})\n//   }\n//   removeTodo = async id => {\n//     await axios.delete(`${SERVER_URL}todo/${id}`)\n//     this.setState(({ todos }) => ({\n//       todos: todos.filter(todo => {\n//         if (todo.id !== id) {\n//           return true;\n//         }\n//         return false;\n//       })\n//     }));\n//   }\n//   editTodo = async (id, text) => {\n//     const response = await axios.put(`${SERVER_URL}todos/${id}`, {text})\n//     const updatedTodo = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.map(todo => {\n//         if (todo.id !== id) {\n//           return todo;\n//         }\n//         return updatedTodo;\n//       })\n//     }));\n//   };\n//   clearAllCompleted = async () => {\n//     const response = await axios.delete(SERVER_URL+'todos/completed')\n//     const {ids} = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.filter(todo => {\n//         if (ids.includes(todo.id)) {\n//           return false;\n//         }\n//         return true;\n//       })\n//     }));\n//   };\n//   render() {\n//     return (\n//       <Container>\n//         <Header createTodo={this.createTodo} />\n//         <Main\n//           todos={this.state.todos}\n//           toggleAllTodos={this.toggleAllTodos}\n//           toggleTodo={this.toggleTodo}\n//           removeTodo={this.removeTodo}\n//           editTodo={this.editTodo}\n//         />\n//         <Footer\n//           todos={this.state.todos}\n//           clearAllCompleted={this.clearAllCompleted}\n//         />\n//       </Container>\n//     );\n//   }\n// }\n\nexport default App;","map":{"version":3,"sources":["/Users/juliandong/Desktop/migrate-REST-to-Graphql/client/src/App.js"],"names":["React","Main","Footer","Header","Container","ApolloClient","RestLink","InMemoryCache","ApolloProvider","SERVER_URL","restLink","uri","client","link","cache","App"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,IAAMC,UAAU,GAAC,uBAAjB;AAEA,IAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAC5BK,EAAAA,GAAG,EAAEF;AADuB,CAAb,CAAjB;AAIA,IAAMG,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,EAAAA,IAAI,EAAEH,QADwB;AAE9BI,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeQ,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Main from './components/Main'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport { Container } from 'todo-components'\n\nimport { ApolloClient } from 'apollo-client'\nimport { RestLink } from 'apollo-link-rest'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from \"react-apollo\";\n\nconst SERVER_URL='http://localhost:4000'\n\nconst restLink = new RestLink({\n  uri: SERVER_URL,\n});\n\nconst client = new ApolloClient({\n  link: restLink,\n  cache: new InMemoryCache ()\n})\n\n// const App = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Container>\n//         <Header />\n//         <Main />\n//         <Footer />\n//       </Container>\n//     </ApolloProvider>\n//   )\n// }\n// class App extends Component {\n//   state = {\n//     todos: []\n//   }\n//   async componentDidMount() {\n//     const response = await axios.get(SERVER_URL+'todos')\n//     this.setState({todos: response.data})\n//   }\n//   createTodo = async ({ text }) => {\n//     const response = await axios.post(SERVER_URL+'todos', {text})\n//     this.setState(({ todos }) => ({\n//       todos: todos.concat([response.data])\n//     }));\n//   };\n\n//   toggleTodo = async ({ id }) => {\n//     const response = await axios.put(`${SERVER_URL}todos/${id}/toggle`)\n//     const updatedTodo = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.map(todo => {\n//         if (todo.id !== id) {\n//           return todo;\n//         }\n//         return updatedTodo;\n//       })\n//     }));\n//   };\n\n//   toggleAllTodos = async () => {\n//     await axios.put(SERVER_URL+'todos/toggle')\n//     const {data} = await axios.get(SERVER_URL+'todos')\n//     this.setState({todos: data})\n//   }\n\n//   removeTodo = async id => {\n//     await axios.delete(`${SERVER_URL}todo/${id}`)\n//     this.setState(({ todos }) => ({\n//       todos: todos.filter(todo => {\n//         if (todo.id !== id) {\n//           return true;\n//         }\n//         return false;\n//       })\n//     }));\n//   }\n\n//   editTodo = async (id, text) => {\n//     const response = await axios.put(`${SERVER_URL}todos/${id}`, {text})\n//     const updatedTodo = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.map(todo => {\n//         if (todo.id !== id) {\n//           return todo;\n//         }\n//         return updatedTodo;\n//       })\n//     }));\n//   };\n\n//   clearAllCompleted = async () => {\n//     const response = await axios.delete(SERVER_URL+'todos/completed')\n//     const {ids} = response.data\n//     this.setState(({ todos }) => ({\n//       todos: todos.filter(todo => {\n//         if (ids.includes(todo.id)) {\n//           return false;\n//         }\n//         return true;\n//       })\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <Container>\n//         <Header createTodo={this.createTodo} />\n//         <Main\n//           todos={this.state.todos}\n//           toggleAllTodos={this.toggleAllTodos}\n//           toggleTodo={this.toggleTodo}\n//           removeTodo={this.removeTodo}\n//           editTodo={this.editTodo}\n//         />\n//         <Footer\n//           todos={this.state.todos}\n//           clearAllCompleted={this.clearAllCompleted}\n//         />\n//       </Container>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}