{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/juliandong/Desktop/migrate-REST-to-Graphql/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation EditTodo($id: Int!, $text: String!) {\\n    editTodo(id: $id, text: $text)\\n      @rest(method: \\\"PUT\\\", type: \\\"Todo\\\", path: \\\"/todos/{args.id}\\\", bodyKey: \\\"text\\\") {\\n      id\\n      text\\n      completed\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RemoveTodo($id: Int!) {\\n    removeTodo(id: $id)\\n      @rest(\\n        method: \\\"DELETE\\\"\\n        type: \\\"todo\\\"\\n        path: \\\"/todo/:id\\\"\\n      ){\\n        NoResponse\\n      }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation ToggleTodo($id: Int!, $body: Boolean) {\\n    toggleTodo(id:$id, body:$body)\\n      @rest(\\n        method: \\\"PUT\\\"\\n        type: \\\"Todo\\\"\\n        path: \\\"/todos/:id/toggle\\\"\\n        bodyKey: \\\"body\\\"\\n      ){\\n        id\\n        completed\\n        text\\n      }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation ToggleAllTodos($body: Boolean) {\\n    toggleAllTodos(body: $body)\\n      @rest(\\n        method: \\\"PUT\\\"\\n        type: \\\"Todo\\\"\\n        path: \\\"/todos/toggle\\\"\\n        bodyKey: \\\"body\\\"\\n      ) {\\n      updated\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from \"react-apollo\";\nimport { Main } from 'todo-components';\nimport withTodos from '../withTodos';\nvar withToggleAllTodos = gql(_templateObject());\nvar withToggleTodo = gql(_templateObject2());\nvar withRemoveTodo = gql(_templateObject3());\nvar withEditTodo = gql(_templateObject4());\nexport default compose(graphql(withTodos, {\n  props: function props(_ref) {\n    var todos = _ref.data.todos;\n    return {\n      todos: todos\n    };\n  }\n}), graphql(withToggleAllTodos, {\n  props: function props(_ref2) {\n    var mutate = _ref2.mutate;\n    return {\n      toggleAllTodos: function toggleAllTodos() {\n        mutate({\n          variables: {\n            body: {}\n          },\n          refetchQueries: [{\n            query: withTodos\n          }]\n        });\n      }\n    };\n  }\n}), graphql(withToggleTodo, {\n  props: function props(_ref3) {\n    var mutate = _ref3.mutate;\n    return {\n      toggleTodo: function toggleTodo(_ref4) {\n        var id = _ref4.id;\n        mutate({\n          variables: {\n            id: id,\n            body: {}\n          },\n          refetchQueries: [{\n            query: withTodos\n          }]\n        });\n      }\n    };\n  }\n}), graphql(withEditTodo, {\n  props: function props(_ref5) {\n    var mutate = _ref5.mutate;\n    return {\n      editTodo: function editTodo(id, text) {\n        return mutate({\n          variables: {\n            id: id,\n            text: {\n              text: text\n            }\n          },\n          refetchQueries: [{\n            query: withTodos\n          }]\n        });\n      }\n    };\n  }\n}), graphql(withRemoveTodo, {\n  props: function props(_ref6) {\n    var mutate = _ref6.mutate;\n    return {\n      removeTodo: function removeTodo(id) {\n        mutate({\n          variables: {\n            id: id\n          },\n          refetchQueries: [{\n            query: withTodos\n          }]\n        });\n      }\n    };\n  }\n}))(Main);","map":{"version":3,"sources":["/Users/juliandong/Desktop/migrate-REST-to-Graphql/client/src/components/Main.js"],"names":["gql","graphql","compose","Main","withTodos","withToggleAllTodos","withToggleTodo","withRemoveTodo","withEditTodo","props","todos","data","mutate","toggleAllTodos","variables","body","refetchQueries","query","toggleTodo","id","editTodo","text","removeTodo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,IAAMC,kBAAkB,GAAGL,GAAH,mBAAxB;AAcA,IAAMM,cAAc,GAAGN,GAAH,oBAApB;AAgBA,IAAMO,cAAc,GAAGP,GAAH,oBAApB;AAaA,IAAMQ,YAAY,GAAGR,GAAH,oBAAlB;AAUA,eAAeE,OAAO,CACpBD,OAAO,CAACG,SAAD,EAAY;AACjBK,EAAAA,KAAK,EAAE;AAAA,QAAWC,KAAX,QAAGC,IAAH,CAAWD,KAAX;AAAA,WAAyB;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAAzB;AAAA;AADU,CAAZ,CADa,EAIpBT,OAAO,CAACI,kBAAD,EAAqB;AAC1BI,EAAAA,KAAK,EAAE;AAAA,QAAEG,MAAF,SAAEA,MAAF;AAAA,WAAe;AACpBC,MAAAA,cAAc,EAAE,0BAAM;AACpBD,QAAAA,MAAM,CAAC;AACLE,UAAAA,SAAS,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WADN;AAELC,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEb;AAAT,WAAD;AAFX,SAAD,CAAN;AAID;AANmB,KAAf;AAAA;AADmB,CAArB,CAJa,EAcpBH,OAAO,CAACK,cAAD,EAAiB;AACtBG,EAAAA,KAAK,EAAE;AAAA,QAAEG,MAAF,SAAEA,MAAF;AAAA,WAAe;AACpBM,MAAAA,UAAU,EAAE,2BAAY;AAAA,YAATC,EAAS,SAATA,EAAS;AACtBP,QAAAA,MAAM,CAAC;AACLE,UAAAA,SAAS,EAAE;AAACK,YAAAA,EAAE,EAAFA,EAAD;AAAKJ,YAAAA,IAAI,EAAE;AAAX,WADN;AAELC,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEb;AAAT,WAAD;AAFX,SAAD,CAAN;AAID;AANmB,KAAf;AAAA;AADe,CAAjB,CAda,EAwBpBH,OAAO,CAACO,YAAD,EAAe;AACpBC,EAAAA,KAAK,EAAE;AAAA,QAAGG,MAAH,SAAGA,MAAH;AAAA,WAAiB;AACtBQ,MAAAA,QAAQ,EAAE,kBAACD,EAAD,EAAKE,IAAL;AAAA,eACRT,MAAM,CAAC;AACLE,UAAAA,SAAS,EAAE;AAAEK,YAAAA,EAAE,EAAFA,EAAF;AAAME,YAAAA,IAAI,EAAE;AAACA,cAAAA,IAAI,EAAJA;AAAD;AAAZ,WADN;AAELL,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEb;AAAT,WAAD;AAFX,SAAD,CADE;AAAA;AADY,KAAjB;AAAA;AADa,CAAf,CAxBa,EAiCpBH,OAAO,CAACM,cAAD,EAAiB;AACtBE,EAAAA,KAAK,EAAE;AAAA,QAAEG,MAAF,SAAEA,MAAF;AAAA,WAAe;AACpBU,MAAAA,UAAU,EAAE,oBAAAH,EAAE,EAAI;AAChBP,QAAAA,MAAM,CAAC;AACLE,UAAAA,SAAS,EAAE;AAACK,YAAAA,EAAE,EAAFA;AAAD,WADN;AAELH,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEb;AAAT,WAAD;AAFX,SAAD,CAAN;AAID;AANmB,KAAf;AAAA;AADe,CAAjB,CAjCa,CAAP,CA2CbD,IA3Ca,CAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport { graphql, compose } from \"react-apollo\";\nimport { Main } from 'todo-components';\nimport withTodos from '../withTodos';\n\n\nconst withToggleAllTodos = gql`\n  mutation ToggleAllTodos($body: Boolean) {\n    toggleAllTodos(body: $body)\n      @rest(\n        method: \"PUT\"\n        type: \"Todo\"\n        path: \"/todos/toggle\"\n        bodyKey: \"body\"\n      ) {\n      updated\n    }\n  }\n`\n\nconst withToggleTodo = gql`\n  mutation ToggleTodo($id: Int!, $body: Boolean) {\n    toggleTodo(id:$id, body:$body)\n      @rest(\n        method: \"PUT\"\n        type: \"Todo\"\n        path: \"/todos/:id/toggle\"\n        bodyKey: \"body\"\n      ){\n        id\n        completed\n        text\n      }\n  }\n`;\n\nconst withRemoveTodo = gql`\n  mutation RemoveTodo($id: Int!) {\n    removeTodo(id: $id)\n      @rest(\n        method: \"DELETE\"\n        type: \"todo\"\n        path: \"/todo/:id\"\n      ){\n        NoResponse\n      }\n  }\n`;\n\nconst withEditTodo = gql`\n  mutation EditTodo($id: Int!, $text: String!) {\n    editTodo(id: $id, text: $text)\n      @rest(method: \"PUT\", type: \"Todo\", path: \"/todos/{args.id}\", bodyKey: \"text\") {\n      id\n      text\n      completed\n    }\n  }\n`;\nexport default compose(\n  graphql(withTodos, {\n    props: ({ data: { todos }}) => ({ todos })\n  }),\n  graphql(withToggleAllTodos, {\n    props: ({mutate}) => ({\n      toggleAllTodos: () => {\n        mutate({\n          variables: { body: {} },\n          refetchQueries: [{ query: withTodos }]\n        })\n      }\n    })\n  }),\n  graphql(withToggleTodo, {\n    props: ({mutate}) => ({\n      toggleTodo: ({ id }) => {\n        mutate({\n          variables: {id, body: {}},\n          refetchQueries: [{ query: withTodos }]\n        })\n      }\n    })\n  }),\n  graphql(withEditTodo, {\n    props: ({ mutate }) => ({\n      editTodo: (id, text) =>\n        mutate({\n          variables: { id, text: {text} },\n          refetchQueries: [{ query: withTodos }]\n        })\n    })\n  }),\n  graphql(withRemoveTodo, {\n    props: ({mutate}) => ({\n      removeTodo: id => {\n        mutate({\n          variables: {id},\n          refetchQueries: [{ query: withTodos }]\n        })\n      }\n    })\n  }),\n)(Main);"]},"metadata":{},"sourceType":"module"}